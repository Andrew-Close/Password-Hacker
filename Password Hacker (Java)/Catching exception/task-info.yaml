type: edu
files:
  - name: src/hacker/main/Main.java
    visible: true
    text: |
      package hacker;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello, world!");
          }
      }
    learner_created: false
  - name: test/HackingTests.java
    visible: false
    text: |-
      import com.google.gson.Gson;
      import com.google.gson.JsonElement;
      import com.google.gson.JsonObject;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.io.IOException;
      import java.util.List;
      import java.util.Random;
      
      
      public class HackingTests extends StageTest {
        String abc = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        boolean ready = false;
        ServerHack serverHack = null;
        Thread serverThread = null;
        String password = null;
        String login = null;
      
        String randomLogin() {
          String[] logins = new String[]{
                  "admin", "Admin", "admin1", "admin2", "admin3",
                  "user1", "user2", "root", "default", "new_user",
                  "some_user", "new_admin", "administrator",
                  "Administrator", "superuser", "super", "su", "alex",
                  "suser", "rootuser", "adminadmin", "useruser",
                  "superadmin", "username", "username1"
          };
          Random ran = new Random();
          return logins[ran.nextInt(logins.length)];
        }
      
        String randomPassword() {
          Random ran = new Random();
          int length = ran.nextInt(5) + 6;
          String ret = "";
          for (int i = 0; i < length; i++) {
            ret = ret.concat(String.valueOf(abc.charAt(ran.nextInt(abc.length()))));
          }
          return ret;
        }
      
        void startServer() throws IOException {
          serverHack = new ServerHack(this);
          serverThread = new Thread(serverHack);
          serverThread.start();
      
          while (!ready) {
            try {
              Thread.sleep(100);
            } catch (InterruptedException ignored) {
            }
          }
        }
      
        void stopServer() throws InterruptedException {
          serverHack.disconnect();
          serverThread.join();
        }
      
        @Override
        public List<TestCase<String[]>> generate() {
          try {
            startServer();
          } catch (IOException ignored) {
          }
          password = randomPassword();
          login = randomLogin();
          return List.of(new TestCase<String[]>()
                  .addArguments("localhost", "9090")
                  .setAttach(new String[]{password, login})
                  .setTimeLimit(25000)
          );
        }
      
        public CheckResult check(String reply, Object attach) {
          try {
            stopServer();
          } catch (Exception ignored) {
          }
          if (serverHack == null || !serverHack.connected) {
            return CheckResult.wrong("You didn't connect to the server");
          }
          if (serverHack.message.size() == 0) {
            return CheckResult.wrong("You sent nothing to the server");
          }
          if (reply.length() == 0 || reply.split("\n").length == 0) {
            return CheckResult.wrong("You did not print anything");
          }
      
          String[] attachStr = (String[]) attach;
      
          String realPassword = attachStr[0];
          String realLogin = attachStr[1];
      
          JsonObject jsonReply;
      
          try {
            jsonReply = new Gson().fromJson(reply, JsonObject.class);
          } catch (Exception e) {
            return CheckResult.wrong("The output of your program is not a valid JSON:\n" + reply);
          }
      
          JsonElement passwordElement = jsonReply.get("password");
          if (passwordElement == null) {
            return CheckResult.wrong("The output of your program did not contain the field \"password\":\n" + reply);
          }
          JsonElement loginElement = jsonReply.get("login");
          if (loginElement == null) {
            return CheckResult.wrong("The output of your program did not contain the field \"login\":\n" + reply);
          }
      
          String password_ = passwordElement.getAsString();
          String login_ = loginElement.getAsString();
      
          if (!login_.equals(realLogin)) {
            return CheckResult.wrong("The login you printed is not correct");
          }
          if (!password_.equals(realPassword)) {
            return CheckResult.wrong("The password you printed is not correct");
          }
      
          boolean findFirstLetter = false;
      
          for (String i : serverHack.message) {
            jsonReply = new Gson().fromJson(i, JsonObject.class);
            String pas = jsonReply.get("password").getAsString();
            String log = jsonReply.get("login").getAsString();
            if (!findFirstLetter && pas.length() == 1 && log == realLogin && realPassword.startsWith(pas)) {
              findFirstLetter = true;
            }
            if (findFirstLetter) {
              if (!log.equals(realLogin)) {
                return CheckResult.wrong("You should find a correct login and then use only it");
              }
              if (pas.charAt(0) != realPassword.charAt(0)) {
                return CheckResult.wrong("When you find a first letter you should then start your passwords with it");
              }
              if (pas.length() > 1) {
                if (!pas.substring(0, pas.length() - 1).equals(realPassword.substring(0, pas.length() - 1))) {
                  return CheckResult.wrong(
                          "You have already found the first " + (pas.length() - 1) + " letters of the password. Use them as a" +
                                  " beginning"
                  );
                }
              }
            }
          }
          return CheckResult.correct();
        }
      }
    learner_created: false
  - name: test/ServerHack.java
    visible: false
    text: |
      import com.google.gson.Gson;
      import com.google.gson.JsonObject;
      
      import java.io.DataInputStream;
      import java.io.DataOutputStream;
      import java.io.IOException;
      import java.net.InetAddress;
      import java.net.ServerSocket;
      import java.net.Socket;
      import java.util.ArrayList;
      import java.util.List;
      
      public class ServerHack implements Runnable {
        HackingTests hacking;
      
        boolean stopThread = true;
        boolean connected;
      
        ServerSocket server;
        Socket socket;
        List<String> message = new ArrayList<>();
      
        DataInputStream inputStream;
        DataOutputStream outputStream;
      
        Gson gson;
        JsonObject jsonObject;
      
        public ServerHack(HackingTests hacking) {
          this.hacking = hacking;
          gson = new Gson();
          jsonObject = new JsonObject();
        }
      
        @Override
        public void run() {
          String address = "localhost";
          int port = 9090;
          try {
            server = new ServerSocket(port, 50, InetAddress.getByName(address));
          } catch (IOException ignored) {
          }
          hacking.ready = true;
          try {
            socket = server.accept();
            connected = true;
            socket.setSoTimeout(16000);
      
            inputStream = new DataInputStream(socket.getInputStream());
            outputStream = new DataOutputStream(socket.getOutputStream());
            while (stopThread) {
              String msg = inputStream.readUTF();
              message.add(msg);
              if (message.size() > 1_000_000) {
                jsonObject.addProperty("result", "Too many attempts");
                outputStream.writeUTF(gson.toJson(jsonObject));
                break;
              }
              String login_, password_;
      
              try {
                JsonObject json = new Gson().fromJson(msg, JsonObject.class);
                login_ = json.get("login").getAsString();
                password_ = json.get("password").getAsString();
              } catch (Exception e) {
                jsonObject.addProperty("result", "Bad request!");
                outputStream.writeUTF(gson.toJson(jsonObject));
                continue;
              }
      
              boolean success = false;
              if (login_.equals(hacking.login)) {
                if (password_.equals(hacking.password)) {
                  jsonObject.addProperty("result", "Connection success!");
                  success = true;
                }else{
                  if (hacking.password.startsWith(password_) && !password_.equals("")) {
                    jsonObject.addProperty("result", "Exception happened during login");
                  } else {
                    jsonObject.addProperty("result", "Wrong password!");
                  }
                }
              } else {
                jsonObject.addProperty("result", "Wrong login!");
              }
              outputStream.writeUTF(gson.toJson(jsonObject));
              if (success) {
                break;
              }
            }
            disconnect();
          } catch (IOException ignored) {
          }
        }
      
        public void disconnect() {
          stopThread = false;
          try {
            inputStream.close();
            socket.close();
            server.close();
          } catch (IOException ignored) {
          }
        }
      }
    learner_created: false
  - name: src/hacker/main/BinaryFilter.java
    visible: true
    text: |
      package hacker;
      
      import java.util.ArrayList;
      import java.util.List;
      import java.util.function.UnaryOperator;
      
      /**
       * This object holds a binary number which can be used to control algorithms, depending on the number. If the filter is 010, then the
       * algorithm will do the false case the first and third times, but will do the true case the second time. The filter can also modify strings
       * based on the state of the filter.
       */
      public class BinaryFilter {
          // The actual binary filter
          int filter;
          // The length of the filter. Should not go above this length when incrementing
          int length;
      
          public BinaryFilter(int length) {
              int temp = 0b1;
              for (int i = 0; i < length; i++) {
                  // The equivalent of multiplying a decimal number by 10, but in binary
                  temp *= 2;
              }
              this.filter = temp;
              this.length = length;
          }
      
          /**
           * Increments the filter by 1. If the filter has reached its limit (if it is equal to one less than 2 ^ the length minus one), then it
           * will not increment.
           * @return whether or not the filter successfully incremented
           */
          public boolean increment() {
              /*
                  Equation explanation:
                  You need to check if the number is equal to one less than the smallest binary number with one more places than the length field
                  in order to verify if you can increment the number. If it is, don't increment.
                  The expression for finding the smallest binary number of a certain amount of places is 2 ^ (# of places - 1). Smallest binary number
                  of 2 places would be 2 ^ 1 = 2, which is 10 in binary. 4 places would be 2 ^ 3 = 8, which is 1000 in binary.
                  Because of this, the expression you should use is 2 ^ (# of places - 1 + 1) = 2 ^ # places.
                  However, you also need to add one to the length to account for the 1 at the beginning of the binary number. So it would be
                  2 ^ (# of places + 1).
                  Then just subtract that by one, and that's it.
               */
              if (this.filter == Math.pow(2, this.length + 1) - 1) {
                  return false;
              } else {
                  this.filter += 1;
                  return true;
              }
          }
      
          /**
           * Takes a string input and returns a modification of the string using the passed function for each character of the string which
           * corresponds with a "1" bit in the filter. For example, if you pass the string "cat" and a function which capitalizes the character,
           * and the filter is 010, then the function will only be applied to the second character, and the returned string will be cAt.
           * @param string the string to modify
           * @param function the function to apply to the corresponding characters
           * @return the modified string
           * @throws IllegalArgumentException if the length of the passed string is not equal to the length of the filter
           */
          public String modifyString(String string, UnaryOperator<Character> function) throws IllegalArgumentException {
              if (string.length() != this.length) {
                  throw new IllegalArgumentException(String.format("The length of the passed string did not equal the length of the filter. Length of the string = %d, length of the filter = %d", string.length(), this.length));
              } else {
                  StringBuilder modifiedString = new StringBuilder();
                  for (int i = 0; i < string.length(); i++) {
                      if (this.getFilter().charAt(i) == '1') {
                          modifiedString.append(function.apply(string.charAt(i)));
                      } else {
                          modifiedString.append(string.charAt(i));
                      }
                  }
                  return modifiedString.toString();
              }
          }
      
          /**
           * Does the same thing as the modifyString method, but applies the function to the string for every combination of bits of the filter
           * and returns an array containing all the modifications. The filter cycles from all 0's to all 1's and applies the function at each iteration.
           * This method always starts at all 0's, and the initial state of the filter is saved at the beginning and reverted to at the end.
           * @param string the string to modify
           * @param function the function to apply to the corresponding characters
           * @return the array of modified string
           */
          public String[] modifyStringAllCombinations(String string, UnaryOperator<Character> function) {
              // The state of the filter before it is changed in the method so it can be reverted to at the end
              int initialFilter = this.filter;
              // Starts at all 0's
              this.filter = generateEmptyFilter();
              List<String> allModifications = new ArrayList<>();
              // Modifies the string when the filter has all 0's, will jump right to ...001 in the loop
              allModifications.add(modifyString(string, function));
              while (increment()) {
                  allModifications.add(modifyString(string, function));
              }
              this.filter = initialFilter;
              return allModifications.toArray(new String[0]);
      
          }
      
          /**
           * Returns a filter of the specified length consisting of all 0's. Same algorithm when instantiating a new filter object.
           * @return the empty filter
           */
          private int generateEmptyFilter() {
              int emptyFilter = 0b1;
              for (int i = 0; i < this.length; i++) {
                  // The equivalent of multiplying a decimal number by 10, but in binary
                  emptyFilter *= 2;
              }
              return emptyFilter;
          }
      
          /**
           * Prints the filter. Does not include the first 1.
           */
          @Deprecated
          public void printFilter() {
              System.out.println(this.getFilter());
          }
      
          public String getFilter() {
              return Integer.toBinaryString(this.filter).substring(1);
          }
      }
    learner_created: true
  - name: src/hacker/data/passwords.txt
    visible: true
    text: |-
      123456
      password
      12345678
      qwerty
      123456789
      12345
      1234
      111111
      1234567
      dragon
      123123
      baseball
      abc123
      football
      monkey
      letmein
      696969
      shadow
      master
      666666
      qwertyuiop
      123321
      mustang
      1234567890
      michael
      654321
      pussy
      superman
      1qaz2wsx
      7777777
      121212
      000000
      qazwsx
      123qwe
      killer
      trustno1
      jordan
      jennifer
      zxcvbnm
      asdfgh
      hunter
      buster
      soccer
      harley
      batman
      andrew
      tigger
      sunshine
      iloveyou
      2000
      charlie
      robert
      thomas
      hockey
      ranger
      daniel
      starwars
      klaster
      112233
      george
      computer
      michelle
      jessica
      pepper
      1111
      zxcvbn
      555555
      11111111
      131313
      freedom
      777777
      pass
      maggie
      159753
      aaaaaa
      ginger
      princess
      joshua
      cheese
      amanda
      summer
      love
      ashley
      6969
      nicole
      chelsea
      biteme
      matthew
      access
      yankees
      987654321
      dallas
      austin
      thunder
      taylor
      matrix
      william
      corvette
      hello
      martin
      heather
      secret
      merlin
      diamond
      1234qwer
      gfhjkm
      hammer
      silver
      222222
      88888888
      anthony
      justin
      test
      bailey
      q1w2e3r4t5
      patrick
      internet
      scooter
      orange
      11111
      golfer
      cookie
      richard
      samantha
      bigdog
      guitar
      jackson
      whatever
      mickey
      chicken
      sparky
      snoopy
      maverick
      phoenix
      camaro
      peanut
      morgan
      welcome
      falcon
      cowboy
      ferrari
      samsung
      andrea
      smokey
      steelers
      joseph
      mercedes
      dakota
      arsenal
      eagles
      melissa
      boomer
      booboo
      spider
      nascar
      monster
      tigers
      yellow
      xxxxxx
      123123123
      gateway
      marina
      diablo
      bulldog
      qwer1234
      compaq
      purple
      hardcore
      banana
      junior
      hannah
      123654
      porsche
      lakers
      iceman
      money
      cowboys
      987654
      london
      tennis
      999999
      ncc1701
      coffee
      scooby
      0000
      miller
      boston
      q1w2e3r4
      brandon
      yamaha
      chester
      mother
      forever
      johnny
      edward
      333333
      oliver
      redsox
      player
      nikita
      knight
      fender
      barney
      midnight
      please
      brandy
      chicago
      badboy
      slayer
      rangers
      charles
      angel
      flower
      rabbit
      wizard
      bigdick
      jasper
      enter
      rachel
      chris
      steven
      winner
      adidas
      victoria
      natasha
      1q2w3e4r
      jasmine
      winter
      prince
      panties
      marine
      ghbdtn
      fishing
      cocacola
      casper
      james
      232323
      raiders
      888888
      marlboro
      gandalf
      asdfasdf
      crystal
      87654321
      12344321
      golden
      8675309
      panther
      lauren
      angela
      thx1138
      angels
      madison
      winston
      shannon
      mike
      toyota
      jordan23
      canada
      sophie
      Password
      apples
      tiger
      razz
      123abc
      pokemon
      qazxsw
      55555
      qwaszx
      muffin
      johnson
      murphy
      cooper
      jonathan
      liverpoo
      david
      danielle
      159357
      jackie
      1990
      123456a
      789456
      turtle
      abcd1234
      scorpion
      qazwsxedc
      101010
      butter
      carlos
      password1
      dennis
      slipknot
      qwerty123
      asdf
      1991
      black
      startrek
      12341234
      cameron
      newyork
      rainbow
      nathan
      john
      1992
      rocket
      viking
      redskins
      asdfghjkl
      1212
      sierra
      peaches
      gemini
      doctor
      wilson
      sandra
      helpme
      qwertyui
      victor
      florida
      dolphin
      pookie
      captain
      tucker
      blue
      liverpool
      theman
      bandit
      dolphins
      maddog
      packers
      jaguar
      lovers
      nicholas
      united
      tiffany
      maxwell
      zzzzzz
      nirvana
      jeremy
      monica
      elephant
      giants
      hotdog
      rosebud
      success
      debbie
      mountain
      444444
      xxxxxxxx
      warrior
      1q2w3e4r5t
      q1w2e3
      123456q
      albert
      metallic
      lucky
      azerty
      7777
      alex
      bond007
      alexis
      1111111
      samson
      5150
      willie
      scorpio
      bonnie
      gators
      benjamin
      voodoo
      driver
      dexter
      2112
      jason
      calvin
      freddy
      212121
      creative
      12345a
      sydney
      rush2112
      1989
      asdfghjk
      red123
      bubba
      4815162342
      passw0rd
      trouble
      gunner
      happy
      gordon
      legend
      jessie
      stella
      qwert
      eminem
      arthur
      apple
      nissan
      bear
      america
      1qazxsw2
      nothing
      parker
      4444
      rebecca
      qweqwe
      garfield
      01012011
      beavis
      69696969
      jack
      asdasd
      december
      2222
      102030
      252525
      11223344
      magic
      apollo
      skippy
      315475
      girls
      kitten
      golf
      copper
      braves
      shelby
      godzilla
      beaver
      fred
      tomcat
      august
      buddy
      airborne
      1993
      1988
      lifehack
      qqqqqq
      brooklyn
      animal
      platinum
      phantom
      online
      xavier
      darkness
      blink182
      power
      fish
      green
      789456123
      voyager
      police
      travis
      12qwaszx
      heaven
      snowball
      lover
      abcdef
      00000
      pakistan
      007007
      walter
      playboy
      blazer
      cricket
      sniper
      donkey
      willow
      loveme
      saturn
      therock
      redwings
      bigboy
      pumpkin
      trinity
      williams
      nintendo
      digital
      destiny
      topgun
      runner
      marvin
      guinness
      chance
      bubbles
      testing
      fire
      november
      minecraft
      asdf1234
      lasvegas
      sergey
      broncos
      cartman
      private
      celtic
      birdie
      little
      cassie
      babygirl
      donald
      beatles
      1313
      family
      12121212
      school
      louise
      gabriel
      eclipse
      fluffy
      147258369
      lol123
      explorer
      beer
      nelson
      flyers
      spencer
      scott
      lovely
      gibson
      doggie
      cherry
      andrey
      snickers
      buffalo
      pantera
      metallica
      member
      carter
      qwertyu
      peter
      alexande
      steve
      bronco
      paradise
      goober
      5555
      samuel
      montana
      mexico
      dreams
      michigan
      carolina
      friends
      magnum
      surfer
      maximus
      genius
      cool
      vampire
      lacrosse
      asd123
      aaaa
      christin
      kimberly
      speedy
      sharon
      carmen
      111222
      kristina
      sammy
      racing
      ou812
      sabrina
      horses
      0987654321
      qwerty1
      baby
      stalker
      enigma
      147147
      star
      poohbear
      147258
      simple
      12345q
      marcus
      brian
      1987
      qweasdzxc
      drowssap
      hahaha
      caroline
      barbara
      dave
      viper
      drummer
      action
      einstein
      genesis
      hello1
      scotty
      friend
      forest
      010203
      hotrod
      google
      vanessa
      spitfire
      badger
      maryjane
      friday
      alaska
      1232323q
      tester
      jester
      jake
      champion
      billy
      147852
      rock
      hawaii
      chevy
      420420
      walker
      stephen
      eagle1
      bill
      1986
      october
      gregory
      svetlana
      pamela
      1984
      music
      shorty
      westside
      stanley
      diesel
      courtney
      242424
      kevin
      hitman
      mark
      12345qwert
      reddog
      frank
      qwe123
      popcorn
      patricia
      aaaaaaaa
      1969
      teresa
      mozart
      buddha
      anderson
      paul
      melanie
      abcdefg
      security
      lucky1
      lizard
      denise
      3333
      a12345
      123789
      ruslan
      stargate
      simpsons
      scarface
      eagle
      123456789a
      thumper
      olivia
      naruto
      1234554321
      general
      cherokee
      a123456
      vincent
      Usuckballz1
      spooky
      qweasd
      free
      frankie
      douglas
      death
      1980
      loveyou
      kitty
      kelly
      veronica
      suzuki
      semperfi
      penguin
      mercury
      liberty
      spirit
      scotland
      natalie
      marley
      vikings
      system
      king
      allison
      marshall
      1979
      098765
      qwerty12
      hummer
      adrian
      1985
      vfhbyf
      sandman
      rocky
      leslie
      antonio
      98765432
      4321
      softball
      passion
      mnbvcxz
      passport
      rascal
      howard
      franklin
      bigred
      alexander
      homer
      redrum
      jupiter
      claudia
      55555555
      141414
      zaq12wsx
      patches
      raider
      infinity
      andre
      54321
      galore
      college
      russia
      kawasaki
      bishop
      77777777
      vladimir
      money1
      freeuser
      wildcats
      francis
      disney
      budlight
      brittany
      1994
      00000000
      sweet
      oksana
      honda
      domino
      bulldogs
      brutus
      swordfis
      norman
      monday
      jimmy
      ironman
      ford
      fantasy
      9999
      7654321
      PASSWORD
      duncan
      1977
      jeffrey
      house
      dancer
      brooke
      timothy
      super
      marines
      justice
      digger
      connor
      patriots
      karina
      202020
      molly
      everton
      tinker
      alicia
      rasdzv3
      poop
      pearljam
      stinky
      colorado
      123123a
      water
      test123
      ncc1701d
      motorola
      ireland
      asdfg
      matt
      houston
      boogie
      zombie
      accord
      vision
      bradley
      reggie
      kermit
      froggy
      ducati
      avalon
      6666
      9379992
      sarah
      saints
      logitech
      chopper
      852456
      simpson
      madonna
      juventus
      claire
      159951
      zachary
      yfnfif
      wolverin
      warcraft
      hello123
      extreme
      peekaboo
      fireman
      eugene
      brenda
      123654789
      russell
      panthers
      georgia
      smith
      skyline
      jesus
      elizabet
      spiderma
      smooth
      pirate
      empire
      bullet
      8888
      virginia
      valentin
      psycho
      predator
      arizona
      134679
      mitchell
      alyssa
      vegeta
      titanic
      christ
      goblue
      fylhtq
      wolf
      mmmmmm
      kirill
      indian
      hiphop
      baxter
      awesome
      people
      danger
      roland
      mookie
      741852963
      1111111111
      dreamer
      bambam
      arnold
      1981
      skipper
      serega
      rolltide
      elvis
      changeme
      simon
      1q2w3e
      lovelove
      fktrcfylh
      denver
      tommy
      mine
      loverboy
      hobbes
      happy1
      alison
      nemesis
      chevelle
      cardinal
      burton
      picard
      151515
      tweety
      michael1
      147852369
      12312
      xxxx
      windows
      turkey
      456789
      1974
      vfrcbv
      sublime
      1975
      galina
      bobby
      newport
      manutd
      american
      alexandr
      1966
      victory
      rooster
      qqq111
      madmax
      electric
      a1b2c3
      wolfpack
      spring
      phpbb
      lalala
      spiderman
      eric
      darkside
      classic
      raptor
      123456789q
      hendrix
      1982
      wombat
      avatar
      alpha
      zxc123
      crazy
      hard
      england
      brazil
      1978
      01011980
      wildcat
      polina
      freepass
      lauragpe
      the0toky
      redhead
      woody
      snowman
      tiger1
      stingray
      kristen
      jerry
      789455
      garcia
      lights
      chronic
      alison77
      service
      service1
      srinivas
      katie
      brother
      single
      cannon
      11georgia
      tattoo
      texas
      party
      taurus
      wolves
      flowers
      tarheels
      fisher
      testtest
      mature
      bass
      brass
      catch22
      juice
      alpha1
      hawkeye
      machine
      pyramid
      vegetaaa
      katana
      moose
      tinkerr
      coyote
      inside
      pepsi
      letmein1
      control
      maiden
      quan
      nong
      neng
      buttons
      biao
      xuan
    learner_created: true
  - name: src/hacker/data/logins.txt
    visible: true
    learner_created: true
  - name: src/hacker/json/LoginPasswordPair.java
    visible: true
    learner_created: true
  - name: src/hacker/json/ServerResponse.java
    visible: true
    learner_created: true
  - name: src/hacker/data/Config.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/26982#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 27 May 2024 15:23:44 UTC"
record: 4
